# Xamarin.Android Pipeline

name: $(Build.SourceBranchName)-$(Build.SourceVersion)-$(Rev:r)

trigger:
  - master
  - d16-*

# External sources, scripts, tests, and yaml template files.
resources:
  repositories:
  - repository: yaml
    type: github
    name: xamarin/yaml-templates
    ref: refs/heads/master
    endpoint: xamarin
  - repository: monodroid
    type: github
    name: xamarin/monodroid
    endpoint: xamarin
  - repository: release_scripts
    type: github
    name: xamarin/release-scripts
    endpoint: xamarin
  - repository: designer
    type: github
    name: xamarin/designer
    endpoint: xamarin
  - repository: qa
    type: github
    name: xamarin/QualityAssurance
    ref: refs/heads/master
    endpoint: xamarin
  - repository: samples
    type: github
    name: xamarin/monodroid-samples
    ref: refs/heads/master
    endpoint: xamarin
  - repository: xfsamples
    type: github
    name: xamarin/xamarin-forms-samples
    ref: refs/heads/master
    endpoint: xamarin

# Global variables
variables:
  XA.Jdk8.Folder: jdk-1.8
  XA.Jdk11.Folder: jdk-11
  NuGetArtifactName: nupkgs
  InstallerArtifactName: installers
  TestAssembliesArtifactName: test-assemblies
  NUnitConsoleVersion: 3.9.0
  DotNetCoreVersion: 3.1.201
  # Version number from: https://github.com/dotnet/installer#installers-and-binaries
  DotNetCorePreviewVersion: 5.0.100-preview.7.20307.3
  HostedMacMojave: Hosted Mac Internal Mojave
  HostedMac: Hosted Mac Internal
  HostedWinVS2019: Hosted Windows 2019 with VS2019
  VSEngWinVS2019: VSEng-Xamarin-Android
  # Run all tests if:
  # - User who queued the job requested it (They set XA.RunAllTests to true)
  # - This is the master integration branch (Pipeline defaults XA.RunAllTests to true)
  # - This is a non-fork branch with name containing "mono-" (for Mono bumps)
  IsMonoBranch: $[and(eq(variables['XA.Commercial.Build'], 'true'), ne(variables['System.PullRequest.IsFork'], 'True'), or(contains(variables['Build.SourceBranchName'], 'mono-'), contains(variables['System.PullRequest.SourceBranch'], 'mono-')))]
  RunAllTests: $[or(eq(variables['XA.RunAllTests'], true), eq(variables['IsMonoBranch'], true))]

# Stage and Job "display names" are shortened because they are combined to form the name of the corresponding GitHub check.
stages:

# This stage ensures Windows specific build steps continue to work, and runs unit tests.
# Check - "Xamarin.Android (Windows Build and Test)"
- stage: win_build_test
  displayName: Windows
  dependsOn: []
  jobs:
  - job: win_build_test
    displayName: Build and Smoke Test
    pool: $(VSEngWinVS2019)
    timeoutInMinutes: 360
    cancelTimeoutInMinutes: 5
    steps:
    - checkout: self
      submodules: recursive

    - template: yaml-templates\kill-processes.yaml

    - template: yaml-templates\clean.yaml

    - script: |
        echo ##vso[task.setvariable variable=JI_JAVA_HOME]%USERPROFILE%\android-toolchain\$(XA.Jdk11.Folder)
      displayName: set JI_JAVA_HOME

    - template: yaml-templates\use-dot-net.yaml
      parameters:
        version: $(DotNetCorePreviewVersion)

    - template: yaml-templates\use-dot-net.yaml
      parameters:
        version: $(DotNetCoreVersion)

    # Downgrade the XA .vsix installed into the instance of VS that we are building with so that we don't restore/build against a test version.
    # The VS installer will attempt to resume any failed or partial installation before trying to downgrade Xamarin.Android.
    # VSIXInstaller.exe will exit non-zero when the downgrade attempt is a no-op, so we will allow this step to fail silently.
    - powershell: |
        $vsWhere = "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe"
        & "$vsWhere" -all -prerelease -latest | Out-Default
        $isLatestVSLaunchable = & "$vsWhere" -all -prerelease -latest -property isLaunchable
        if ($isLatestVSLaunchable -eq 0) {
            $vsPath = & "$vsWhere" -all -prerelease -latest -property installationPath
            Write-Host "Attempting to repair VS instance:" $vsPath
            $vsInstaller = "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vs_installer.exe"
            & "$vsInstaller" resume --installPath $vsPath --quiet --norestart | Out-Default
            Write-Host "vs_installer.exe resume attempt complete"
        }
        $vsixInstaller = "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\resources\app\ServiceHub\Services\Microsoft.VisualStudio.Setup.Service\VSIXInstaller.exe"
        $ts = Get-Date -Format FileDateTimeUniversal
        $log = "xavsixdowngrade-$ts.log"
        $process = Start-Process -NoNewWindow -FilePath $vsixInstaller -ArgumentList "/downgrade:Xamarin.Android.Sdk /admin /quiet /logFile:$log" -Wait -PassThru
        Get-Content "${env:TEMP}\$log" | Write-Host
        Write-Host "VSInstaller.exe exited with code:" $process.ExitCode
        Remove-Item "${env:TEMP}\$log"
      displayName: downgrade XA to stable
      ignoreLASTEXITCODE: true

    - task: MSBuild@1
      displayName: msbuild Xamarin.Android /t:Prepare
      inputs:
        solution: Xamarin.Android.sln
        configuration: $(XA.Build.Configuration)
        msbuildArguments: /t:Prepare /p:AutoProvision=true /bl:$(System.DefaultWorkingDirectory)\bin\Build$(XA.Build.Configuration)\msbuild-prepare.binlog

    - task: MSBuild@1
      displayName: msbuild Xamarin.Android
      inputs:
        solution: Xamarin.Android.sln
        configuration: $(XA.Build.Configuration)
        msbuildArguments: /bl:$(System.DefaultWorkingDirectory)\bin\Build$(XA.Build.Configuration)\msbuild-build.binlog

    - task: MSBuild@1
      displayName: msbuild create-vsix
      inputs:
        solution: build-tools\create-vsix\create-vsix.csproj
        configuration: $(XA.Build.Configuration)
        msbuildArguments: /p:CreateVsixContainer=True /p:ZipPackageCompressionLevel=Normal /bl:$(System.DefaultWorkingDirectory)\bin\Build$(XA.Build.Configuration)\msbuild-create-vsix.binlog

    - task: MSBuild@1
      displayName: pack all nupkgs
      inputs:
        solution: $(System.DefaultWorkingDirectory)\build-tools\create-packs\Microsoft.Android.Sdk.proj
        configuration: $(XA.Build.Configuration)
        msbuildArguments: /t:CreateAllPacks /restore /bl:$(System.DefaultWorkingDirectory)\bin\Build$(XA.Build.Configuration)\create-all-packs.binlog

    - task: CmdLine@1
      displayName: xabuild Xamarin.Android-Tests
      inputs:
        filename: bin\$(XA.Build.Configuration)\bin\xabuild.exe
        arguments: Xamarin.Android-Tests.sln /restore /p:Configuration=$(XA.Build.Configuration) /bl:$(System.DefaultWorkingDirectory)\bin\Test$(XA.Build.Configuration)\msbuild-build-tests.binlog

    - task: MSBuild@1
      displayName: nunit Java.Interop Tests
      inputs:
        solution: Xamarin.Android.sln
        configuration: $(XA.Build.Configuration)
        msbuildArguments: >
          /restore
          /t:RunJavaInteropTests
          /p:TestAssembly="bin\Test$(XA.Build.Configuration)\generator-Tests.dll;bin\Test$(XA.Build.Configuration)\Java.Interop.Tools.JavaCallableWrappers-Tests.dll;bin\Test$(XA.Build.Configuration)\logcat-parse-Tests.dll;bin\Test$(XA.Build.Configuration)\Xamarin.Android.Tools.ApiXmlAdjuster-Tests.dll;bin\Test$(XA.Build.Configuration)\Xamarin.Android.Tools.Bytecode-Tests.dll"
          /bl:$(System.DefaultWorkingDirectory)\bin\Test$(XA.Build.Configuration)\msbuild-run-ji-tests.binlog
      continueOnError: True

    - task: PublishTestResults@2
      displayName: publish test results
      inputs:
        testResultsFormat: NUnit
        testResultsFiles: TestResult-*.xml
        testRunTitle: Java Interop Tests - Windows Build Tree

    - template: yaml-templates\run-nunit-tests.yaml
      parameters:
        testRunTitle: CodeBehindUnitTests - Windows Build Tree
        testAssembly: $(System.DefaultWorkingDirectory)\bin\Test$(XA.Build.Configuration)\CodeBehind\CodeBehindUnitTests.dll
        testResultsFile: TestResult-CodeBehindUnitTests-WinBuildTree-$(XA.Build.Configuration).xml

    - template: yaml-templates\run-nunit-tests.yaml
      parameters:
        testRunTitle: Xamarin.Android.MakeBundle-UnitTests - Windows Build Tree
        testAssembly: $(System.DefaultWorkingDirectory)\bin\Test$(XA.Build.Configuration)\Xamarin.Android.MakeBundle-UnitTests.dll
        testResultsFile: TestResult-MakeBundleUnitTests-WinBuildTree-$(XA.Build.Configuration).xml

    - template: yaml-templates\run-nunit-tests.yaml
      parameters:
        testRunTitle: EmbeddedDSOUnitTests - Windows Build Tree
        testAssembly: $(System.DefaultWorkingDirectory)\bin\Test$(XA.Build.Configuration)\EmbeddedDSOUnitTests.dll
        testResultsFile: TestResult-EmbeddedDSOUnitTests-WinBuildTree-$(XA.Build.Configuration).xml

    # Limit the amount of worker threads used to run these tests in parallel to half of what is currently available (8) on the Windows pool.
    # Using all available cores seems to occasionally bog down our machines and cause parallel test execution to slow down dramatically.
    # Only run a subset of the Xamarin.Android.Build.Tests against the local Windows build tree.
    - template: yaml-templates\run-nunit-tests.yaml
      parameters:
        testRunTitle: Smoke MSBuild Tests - Windows Build Tree
        testAssembly: $(System.DefaultWorkingDirectory)\bin\Test$(XA.Build.Configuration)\Xamarin.Android.Build.Tests.dll
        testResultsFile: TestResult-SmokeMSBuildTests-WinBuildTree-$(XA.Build.Configuration).xml
        nunitConsoleExtraArgs: --where "cat == SmokeTests" --workers=4

    - template: yaml-templates\upload-results.yaml
      parameters:
        artifactName: Build Results - Windows

    - template: yaml-templates\fail-on-issue.yaml

