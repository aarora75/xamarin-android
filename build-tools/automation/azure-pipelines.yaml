# Xamarin.Android Pipeline

name: $(Build.SourceBranchName)-$(Build.SourceVersion)-$(Rev:r)

trigger:
  - master
  - d16-*

# External sources, scripts, tests, and yaml template files.
resources:
  repositories:
  - repository: yaml
    type: github
    name: xamarin/yaml-templates
    ref: refs/heads/master
    endpoint: xamarin
  - repository: monodroid
    type: github
    name: xamarin/monodroid
    endpoint: xamarin
  - repository: release_scripts
    type: github
    name: xamarin/release-scripts
    endpoint: xamarin
  - repository: designer
    type: github
    name: xamarin/designer
    endpoint: xamarin
  - repository: qa
    type: github
    name: xamarin/QualityAssurance
    ref: refs/heads/master
    endpoint: xamarin
  - repository: samples
    type: github
    name: xamarin/monodroid-samples
    ref: refs/heads/master
    endpoint: xamarin
  - repository: xfsamples
    type: github
    name: xamarin/xamarin-forms-samples
    ref: refs/heads/master
    endpoint: xamarin

# Global variables
variables:
  XA.Jdk8.Folder: jdk-1.8
  XA.Jdk11.Folder: jdk-11
  NuGetArtifactName: nupkgs
  InstallerArtifactName: installers
  TestAssembliesArtifactName: test-assemblies
  NUnitConsoleVersion: 3.9.0
  DotNetCoreVersion: 3.1.201
  # Version number from: https://github.com/dotnet/installer#installers-and-binaries
  DotNetCorePreviewVersion: 5.0.100-preview.7.20307.3
  HostedMacMojave: Hosted Mac Internal Mojave
  HostedMac: Hosted Mac Internal
  HostedWinVS2019: Hosted Windows 2019 with VS2019
  VSEngWinVS2019: VSEng-Xamarin-Android
  # Run all tests if:
  # - User who queued the job requested it (They set XA.RunAllTests to true)
  # - This is the master integration branch (Pipeline defaults XA.RunAllTests to true)
  # - This is a non-fork branch with name containing "mono-" (for Mono bumps)
  IsMonoBranch: $[and(eq(variables['XA.Commercial.Build'], 'true'), ne(variables['System.PullRequest.IsFork'], 'True'), or(contains(variables['Build.SourceBranchName'], 'mono-'), contains(variables['System.PullRequest.SourceBranch'], 'mono-')))]
  RunAllTests: $[or(eq(variables['XA.RunAllTests'], true), eq(variables['IsMonoBranch'], true))]

# Stage and Job "display names" are shortened because they are combined to form the name of the corresponding GitHub check.
stages:
- stage: mac_build
  displayName: Mac
  dependsOn: []
  jobs:
  # Check - "Xamarin.Android (Mac Build)"
  - job: mac_build_create_installers
    displayName: Build
    pool: $(MacMojaveBuildPool)
    timeoutInMinutes: 240
    cancelTimeoutInMinutes: 5
    workspace:
      clean: all
    steps:
    - checkout: self
      submodules: recursive

    - script: echo "##vso[task.setvariable variable=JI_JAVA_HOME]$HOME/Library/Android/$(XA.Jdk11.Folder)"
      displayName: set JI_JAVA_HOME

    - template: yaml-templates/use-dot-net.yaml
      parameters:
        version: $(DotNetCorePreviewVersion)

    - template: yaml-templates/use-dot-net.yaml
      parameters:
        version: $(DotNetCoreVersion)

    # Prepare and build everything
    - script: make prepare-update-mono V=1 CONFIGURATION=$(XA.Build.Configuration) PREPARE_CI=1 PREPARE_AUTOPROVISION=1
      workingDirectory: $(System.DefaultWorkingDirectory)/xamarin-android
      displayName: make prepare-update-mono

    # Clone monodroid wth submodules, but disregard the unused xamarin-android submodule.
    - checkout: monodroid
      clean: true
      submodules: recursive
      path: s/xamarin-android/external/monodroid
      persistCredentials: true
      condition: and(succeeded(), eq(variables['XA.Commercial.Build'], 'true'))

    - script: rm -rf external/monodroid/external/xamarin-android
      workingDirectory: $(System.DefaultWorkingDirectory)/xamarin-android
      displayName: delete legacy xamarin-android submodule
      condition: and(succeeded(), eq(variables['XA.Commercial.Build'], 'true'))

    - script: make prepare-external-git-dependencies PREPARE_CI=1 CONFIGURATION=$(XA.Build.Configuration)
      workingDirectory: $(System.DefaultWorkingDirectory)/xamarin-android
      displayName: make prepare-external-git-dependencies
      condition: and(succeeded(), eq(variables['XA.Commercial.Build'], 'true'))

    - script: make jenkins V=1 CONFIGURATION=$(XA.Build.Configuration) PREPARE_CI=1 PREPARE_AUTOPROVISION=1
      workingDirectory: $(System.DefaultWorkingDirectory)/xamarin-android
      displayName: make jenkins

    # Build and package test assemblies
    - script: make all-tests V=1 CONFIGURATION=$(XA.Build.Configuration)
      workingDirectory: $(System.DefaultWorkingDirectory)/xamarin-android
      displayName: make all-tests

    - script: >
        cp -r bin/$(XA.Build.Configuration)/bcl-tests bin/Test$(XA.Build.Configuration)/bcl-tests &&
        cp bin/Build$(XA.Build.Configuration)/ProfileAssemblies.projitems bin/Test$(XA.Build.Configuration)/bcl-tests/
      workingDirectory: $(System.DefaultWorkingDirectory)/xamarin-android
      displayName: copy bcl-tests assemblies

    - task: PublishPipelineArtifact@1
      displayName: upload test assemblies
      inputs:
        artifactName: $(TestAssembliesArtifactName)
        targetPath: xamarin-android/bin/Test$(XA.Build.Configuration)

    # Create installers
    - template: install-certificates.yml@yaml
      parameters:
        DeveloperIdApplication: $(developer-id-application)
        DeveloperIdInstaller: $(developer-id-installer)
        IphoneDeveloper: $(iphone-developer)
        MacDeveloper: $(mac-developer)
        HostedMacKeychainPassword: $(AzDO-OnPrem-KeychainPass)

    - script: make create-installers V=1 CONFIGURATION=$(XA.Build.Configuration)
      workingDirectory: $(System.DefaultWorkingDirectory)/xamarin-android
      displayName: make create-installers

    - script: >
        mkdir -p bin/Build$(XA.Build.Configuration)/$(InstallerArtifactName) &&
        cp bin/Build$(XA.Build.Configuration)/*.vsix bin/Build$(XA.Build.Configuration)/$(InstallerArtifactName) &&
        cp bin/Build$(XA.Build.Configuration)/*.pkg bin/Build$(XA.Build.Configuration)/$(InstallerArtifactName)
      workingDirectory: $(System.DefaultWorkingDirectory)/xamarin-android
      displayName: copy unsigned installers

    - script: >
        VERSION=`LANG=C; export LANG && git log --no-color --first-parent -n1 --pretty=format:%ct` &&
        echo "d1ec039f-f3db-468b-a508-896d7c382999 $VERSION" > bin/Build$(XA.Build.Configuration)/$(InstallerArtifactName)/updateinfo
      workingDirectory: $(System.DefaultWorkingDirectory)/xamarin-android
      displayName: create updateinfo file

    - task: PublishPipelineArtifact@1
      displayName: upload installers
      inputs:
        artifactName: $(InstallerArtifactName)
        targetPath: xamarin-android/bin/Build$(XA.Build.Configuration)/$(InstallerArtifactName)

    - task: MSBuild@1
      displayName: pack all nupkgs
      inputs:
        solution: $(System.DefaultWorkingDirectory)/xamarin-android/build-tools/create-packs/Microsoft.Android.Sdk.proj
        configuration: $(XA.Build.Configuration)
        msbuildArguments: /t:CreateAllPacks /restore /bl:$(System.DefaultWorkingDirectory)/xamarin-android/bin/Build$(XA.Build.Configuration)/create-all-packs.binlog

    - task: NuGetCommand@2
      displayName: push nupkgs
      inputs:
        command: push
        packagesToPush: $(System.DefaultWorkingDirectory)/xamarin-android/bin/Build$(XA.Build.Configuration)/$(NuGetArtifactName)/*.nupkg
        nuGetFeedType: external
        publishFeedCredentials: xamarin-impl public feed
      condition: and(succeeded(), or(ne(variables['Build.Reason'], 'PullRequest'), eq(variables['PushXAPackages'], 'true')))

    - task: PublishPipelineArtifact@1
      displayName: upload nupkgs
      inputs:
        artifactName: $(NuGetArtifactName)
        targetPath: $(System.DefaultWorkingDirectory)/xamarin-android/bin/Build$(XA.Build.Configuration)/$(NuGetArtifactName)

    - template: yaml-templates/upload-results.yaml
      parameters:
        solution: xamarin-android/build-tools/Xamarin.Android.Tools.BootstrapTasks/Xamarin.Android.Tools.BootstrapTasks.csproj
        artifactName: Build Results - macOS

    - template: uninstall-certificates/v1.yml@yaml
      parameters:
        HostedMacKeychainPassword: $(AzDO-OnPrem-KeychainPass)

- stage: finalize_installers
  displayName: Finalize Installers
  dependsOn: mac_build
  condition: and(eq(dependencies.mac_build.result, 'Succeeded'), eq(variables['XA.Commercial.Build'], 'true'), ne(variables['Build.Reason'], 'PullRequest'), eq(variables['Build.DefinitionName'], 'Xamarin.Android'))
  jobs:
  # Check - "Xamarin.Android (Finalize Installers Notarize and Upload to Storage)"
  - job: notarize_pkg_upload_storage
    displayName: Notarize and Upload to Storage
    pool: $(MacMojaveBuildPool)
    timeoutInMinutes: 90
    cancelTimeoutInMinutes: 1
    workspace:
      clean: all
    variables:
    - group: Xamarin Notarization
    steps:
    - checkout: self

    - checkout: release_scripts
      clean: true
      persistCredentials: true

    - template: install-certificates.yml@yaml
      parameters:
        DeveloperIdApplication: $(developer-id-application)
        DeveloperIdInstaller: $(developer-id-installer)
        IphoneDeveloper: $(iphone-developer)
        MacDeveloper: $(mac-developer)

    - task: DownloadPipelineArtifact@2
      inputs:
        artifactName: $(InstallerArtifactName)
        downloadPath: $(System.DefaultWorkingDirectory)/storage-artifacts

    - powershell: |
        $pkg = Get-ChildItem -Path "$(System.DefaultWorkingDirectory)/storage-artifacts/*" -Include *.pkg -File
        if (![System.IO.File]::Exists($pkg)) {
            throw [System.IO.FileNotFoundException] "Pkg File not found in $(System.DefaultWorkingDirectory)/storage-artifacts"
        }
        Write-Host "##vso[task.setvariable variable=XA.Unsigned.Pkg]$pkg"
      displayName: set variable to pkg path

    - template: productsign-pkg.yml@yaml
      parameters:
        UnsignedPkgPath: $(XA.Unsigned.Pkg)

    - script: >
        cd $(System.DefaultWorkingDirectory)/release-scripts &&
        git checkout $(ReleaseScriptsBranch) &&
        sudo xcode-select -s /Applications/$(NotarizationXcode) &&
        ruby notarize.rb $(XA.Unsigned.Pkg) $(XamarinIdentifier) $(XamarinUserId) $(XamarinPassword) $(TeamID)
      displayName: Notarize PKG

    - script: xcrun stapler validate $(XA.Unsigned.Pkg)
      displayName: validate notarized pkg

    - template: upload-to-storage.yml@yaml
      parameters:
        BuildPackages: $(System.DefaultWorkingDirectory)/storage-artifacts
        AzureContainerName: $(Azure.Container.Name)
        AzureUploadLocation: $(Build.DefinitionName)/$(Build.BuildId)/$(Build.SourceBranchName)/$(Build.SourceVersion)
        SourceDirectory: $(System.DefaultWorkingDirectory)/xamarin-android

    - script: cp $(System.DefaultWorkingDirectory)/storage-artifacts/*.pkg $(Build.ArtifactStagingDirectory)
      displayName: copy notarized pkg

    - task: PublishPipelineArtifact@1
      displayName: upload notarized pkg
      inputs:
        artifactName: notarized-pkg
        targetPath: $(Build.ArtifactStagingDirectory)

    - template: uninstall-certificates/v1.yml@yaml
      parameters:
        HostedMacKeychainPassword: $(AzDO-OnPrem-KeychainPass)

